
ATSAM3X8E_LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000468  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000434  20000000  00080468  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  20000434  0008089c  00020434  2**2
                  ALLOC
  3 .stack        00000404  20000474  000808dc  00020434  2**0
                  ALLOC
  4 .heap         00000200  20000878  00080ce0  00020434  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002045d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00001089  00000000  00000000  000204b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000391  00000000  00000000  0002153f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000e5  00000000  00000000  000218d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000080  00000000  00000000  000219b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00021a35  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00010296  00000000  00000000  00021a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001613  00000000  00000000  00031d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005081e  00000000  00000000  0003332e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00000278  00000000  00000000  00083b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	78 08 00 20 65 01 08 00 61 01 08 00 61 01 08 00     x.. e...a...a...
   80010:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
	...
   8002c:	61 01 08 00 61 01 08 00 00 00 00 00 61 01 08 00     a...a.......a...
   8003c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8004c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   8005c:	61 01 08 00 61 01 08 00 61 01 08 00 00 00 00 00     a...a...a.......
   8006c:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
	...
   80084:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   80094:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800a4:	00 00 00 00 61 01 08 00 61 01 08 00 61 01 08 00     ....a...a...a...
   800b4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800c4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800d4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...
   800e4:	61 01 08 00 61 01 08 00 61 01 08 00 61 01 08 00     a...a...a...a...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20000434 	.word	0x20000434
   80110:	00000000 	.word	0x00000000
   80114:	00080468 	.word	0x00080468

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080468 	.word	0x00080468
   80154:	20000438 	.word	0x20000438
   80158:	00080468 	.word	0x00080468
   8015c:	00000000 	.word	0x00000000

00080160 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80160:	e7fe      	b.n	80160 <Dummy_Handler>
	...

00080164 <Reset_Handler>:
{
   80164:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
   80166:	4b11      	ldr	r3, [pc, #68]	; (801ac <Reset_Handler+0x48>)
   80168:	4a11      	ldr	r2, [pc, #68]	; (801b0 <Reset_Handler+0x4c>)
   8016a:	429a      	cmp	r2, r3
   8016c:	d009      	beq.n	80182 <Reset_Handler+0x1e>
   8016e:	4b0f      	ldr	r3, [pc, #60]	; (801ac <Reset_Handler+0x48>)
   80170:	4a0f      	ldr	r2, [pc, #60]	; (801b0 <Reset_Handler+0x4c>)
   80172:	e003      	b.n	8017c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
   80174:	6811      	ldr	r1, [r2, #0]
   80176:	6019      	str	r1, [r3, #0]
   80178:	3304      	adds	r3, #4
   8017a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
   8017c:	490d      	ldr	r1, [pc, #52]	; (801b4 <Reset_Handler+0x50>)
   8017e:	428b      	cmp	r3, r1
   80180:	d3f8      	bcc.n	80174 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
   80182:	4b0d      	ldr	r3, [pc, #52]	; (801b8 <Reset_Handler+0x54>)
   80184:	e002      	b.n	8018c <Reset_Handler+0x28>
                *pDest++ = 0;
   80186:	2200      	movs	r2, #0
   80188:	601a      	str	r2, [r3, #0]
   8018a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
   8018c:	4a0b      	ldr	r2, [pc, #44]	; (801bc <Reset_Handler+0x58>)
   8018e:	4293      	cmp	r3, r2
   80190:	d3f9      	bcc.n	80186 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80192:	4b0b      	ldr	r3, [pc, #44]	; (801c0 <Reset_Handler+0x5c>)
   80194:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   80198:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   8019c:	4a09      	ldr	r2, [pc, #36]	; (801c4 <Reset_Handler+0x60>)
   8019e:	6093      	str	r3, [r2, #8]
        __libc_init_array();
   801a0:	4b09      	ldr	r3, [pc, #36]	; (801c8 <Reset_Handler+0x64>)
   801a2:	4798      	blx	r3
        main();
   801a4:	4b09      	ldr	r3, [pc, #36]	; (801cc <Reset_Handler+0x68>)
   801a6:	4798      	blx	r3
   801a8:	e7fe      	b.n	801a8 <Reset_Handler+0x44>
   801aa:	bf00      	nop
   801ac:	20000000 	.word	0x20000000
   801b0:	00080468 	.word	0x00080468
   801b4:	20000434 	.word	0x20000434
   801b8:	20000434 	.word	0x20000434
   801bc:	20000474 	.word	0x20000474
   801c0:	00080000 	.word	0x00080000
   801c4:	e000ed00 	.word	0xe000ed00
   801c8:	000802d1 	.word	0x000802d1
   801cc:	00080295 	.word	0x00080295

000801d0 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit( void )
{
  /* Set FWS according to SYS_BOARD_MCKR configuration */
  EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   801d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   801d4:	4a20      	ldr	r2, [pc, #128]	; (80258 <SystemInit+0x88>)
   801d6:	6013      	str	r3, [r2, #0]
  EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   801d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
   801dc:	6013      	str	r3, [r2, #0]

  /* Initialize main oscillator */
  if ( !(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) )
   801de:	4b1f      	ldr	r3, [pc, #124]	; (8025c <SystemInit+0x8c>)
   801e0:	6a1b      	ldr	r3, [r3, #32]
   801e2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   801e6:	d107      	bne.n	801f8 <SystemInit+0x28>
  {
    PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
   801e8:	4a1d      	ldr	r2, [pc, #116]	; (80260 <SystemInit+0x90>)
   801ea:	4b1c      	ldr	r3, [pc, #112]	; (8025c <SystemInit+0x8c>)
   801ec:	621a      	str	r2, [r3, #32]
    while ( !(PMC->PMC_SR & PMC_SR_MOSCXTS) )
   801ee:	4b1b      	ldr	r3, [pc, #108]	; (8025c <SystemInit+0x8c>)
   801f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   801f2:	f013 0f01 	tst.w	r3, #1
   801f6:	d0fa      	beq.n	801ee <SystemInit+0x1e>
    {
    }
  }

  /* Switch to 3-20MHz Xtal oscillator */
  PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | SYS_BOARD_OSCOUNT | CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;
   801f8:	4a1a      	ldr	r2, [pc, #104]	; (80264 <SystemInit+0x94>)
   801fa:	4b18      	ldr	r3, [pc, #96]	; (8025c <SystemInit+0x8c>)
   801fc:	621a      	str	r2, [r3, #32]

  while ( !(PMC->PMC_SR & PMC_SR_MOSCSELS) )
   801fe:	4b17      	ldr	r3, [pc, #92]	; (8025c <SystemInit+0x8c>)
   80200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80202:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   80206:	d0fa      	beq.n	801fe <SystemInit+0x2e>
  {
  }
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80208:	4a14      	ldr	r2, [pc, #80]	; (8025c <SystemInit+0x8c>)
   8020a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8020c:	f023 0303 	bic.w	r3, r3, #3
   80210:	f043 0301 	orr.w	r3, r3, #1
   80214:	6313      	str	r3, [r2, #48]	; 0x30
  while (!(PMC->PMC_SR & PMC_SR_MCKRDY))
   80216:	4b11      	ldr	r3, [pc, #68]	; (8025c <SystemInit+0x8c>)
   80218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8021a:	f013 0f08 	tst.w	r3, #8
   8021e:	d0fa      	beq.n	80216 <SystemInit+0x46>
  {
  }

  /* Initialize PLLA */
  PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   80220:	4a11      	ldr	r2, [pc, #68]	; (80268 <SystemInit+0x98>)
   80222:	4b0e      	ldr	r3, [pc, #56]	; (8025c <SystemInit+0x8c>)
   80224:	629a      	str	r2, [r3, #40]	; 0x28
  while ( !(PMC->PMC_SR & PMC_SR_LOCKA) )
   80226:	4b0d      	ldr	r3, [pc, #52]	; (8025c <SystemInit+0x8c>)
   80228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8022a:	f013 0f02 	tst.w	r3, #2
   8022e:	d0fa      	beq.n	80226 <SystemInit+0x56>
  {
  }

  /* Switch to main clock */
  PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   80230:	2211      	movs	r2, #17
   80232:	4b0a      	ldr	r3, [pc, #40]	; (8025c <SystemInit+0x8c>)
   80234:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80236:	4b09      	ldr	r3, [pc, #36]	; (8025c <SystemInit+0x8c>)
   80238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8023a:	f013 0f08 	tst.w	r3, #8
   8023e:	d0fa      	beq.n	80236 <SystemInit+0x66>
  {
  }

  /* Switch to PLLA */
  PMC->PMC_MCKR = SYS_BOARD_MCKR;
   80240:	2212      	movs	r2, #18
   80242:	4b06      	ldr	r3, [pc, #24]	; (8025c <SystemInit+0x8c>)
   80244:	631a      	str	r2, [r3, #48]	; 0x30
  while ( !(PMC->PMC_SR & PMC_SR_MCKRDY) )
   80246:	4b05      	ldr	r3, [pc, #20]	; (8025c <SystemInit+0x8c>)
   80248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8024a:	f013 0f08 	tst.w	r3, #8
   8024e:	d0fa      	beq.n	80246 <SystemInit+0x76>
  {
  }

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
   80250:	4a06      	ldr	r2, [pc, #24]	; (8026c <SystemInit+0x9c>)
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <SystemInit+0xa0>)
   80254:	601a      	str	r2, [r3, #0]
   80256:	4770      	bx	lr
   80258:	400e0a00 	.word	0x400e0a00
   8025c:	400e0600 	.word	0x400e0600
   80260:	00370809 	.word	0x00370809
   80264:	01370809 	.word	0x01370809
   80268:	200d3f01 	.word	0x200d3f01
   8026c:	0501bd00 	.word	0x0501bd00
   80270:	20000000 	.word	0x20000000

00080274 <delay_ms>:
#define LED_INIT() PIOB->PIO_OER |= PIO_PB27
#define LEDON() (PIOB->PIO_SODR |= PIO_PB27)
#define LEDOFF() (PIOB->PIO_CODR |= PIO_PB27)

void delay_ms(uint32_t ms)
{
   80274:	b082      	sub	sp, #8
	// Each iteration takes roughly 9 CPU cycles
	// So we calculate loop count as: (F_CPU / 9000) * ms
	volatile uint32_t count = (F_CPU / 9000)*ms;
   80276:	f242 4375 	movw	r3, #9333	; 0x2475
   8027a:	fb03 f000 	mul.w	r0, r3, r0
   8027e:	9001      	str	r0, [sp, #4]
	
	while (count--)
   80280:	e000      	b.n	80284 <delay_ms+0x10>
		{
			__asm__ __volatile__("nop");
   80282:	bf00      	nop
	while (count--)
   80284:	9b01      	ldr	r3, [sp, #4]
   80286:	1e5a      	subs	r2, r3, #1
   80288:	9201      	str	r2, [sp, #4]
   8028a:	2b00      	cmp	r3, #0
   8028c:	d1f9      	bne.n	80282 <delay_ms+0xe>
		}
}
   8028e:	b002      	add	sp, #8
   80290:	4770      	bx	lr
	...

00080294 <main>:

int main(void)
{
   80294:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80296:	4b0b      	ldr	r3, [pc, #44]	; (802c4 <main+0x30>)
   80298:	4798      	blx	r3

    LED_INIT();
   8029a:	4a0b      	ldr	r2, [pc, #44]	; (802c8 <main+0x34>)
   8029c:	6913      	ldr	r3, [r2, #16]
   8029e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   802a2:	6113      	str	r3, [r2, #16]
    /* Replace with your application code */
    while (1)
    {
	    LEDON();
   802a4:	4c08      	ldr	r4, [pc, #32]	; (802c8 <main+0x34>)
   802a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   802a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   802ac:	6323      	str	r3, [r4, #48]	; 0x30
	    delay_ms(100);
   802ae:	2064      	movs	r0, #100	; 0x64
   802b0:	4d06      	ldr	r5, [pc, #24]	; (802cc <main+0x38>)
   802b2:	47a8      	blx	r5
	    
	    LEDOFF();
   802b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   802b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   802ba:	6363      	str	r3, [r4, #52]	; 0x34
	    delay_ms(100);
   802bc:	2064      	movs	r0, #100	; 0x64
   802be:	47a8      	blx	r5
   802c0:	e7f0      	b.n	802a4 <main+0x10>
   802c2:	bf00      	nop
   802c4:	000801d1 	.word	0x000801d1
   802c8:	400e1000 	.word	0x400e1000
   802cc:	00080275 	.word	0x00080275

000802d0 <__libc_init_array>:
   802d0:	b570      	push	{r4, r5, r6, lr}
   802d2:	4e0f      	ldr	r6, [pc, #60]	; (80310 <__libc_init_array+0x40>)
   802d4:	4d0f      	ldr	r5, [pc, #60]	; (80314 <__libc_init_array+0x44>)
   802d6:	1b76      	subs	r6, r6, r5
   802d8:	10b6      	asrs	r6, r6, #2
   802da:	bf18      	it	ne
   802dc:	2400      	movne	r4, #0
   802de:	d005      	beq.n	802ec <__libc_init_array+0x1c>
   802e0:	3401      	adds	r4, #1
   802e2:	f855 3b04 	ldr.w	r3, [r5], #4
   802e6:	4798      	blx	r3
   802e8:	42a6      	cmp	r6, r4
   802ea:	d1f9      	bne.n	802e0 <__libc_init_array+0x10>
   802ec:	4e0a      	ldr	r6, [pc, #40]	; (80318 <__libc_init_array+0x48>)
   802ee:	4d0b      	ldr	r5, [pc, #44]	; (8031c <__libc_init_array+0x4c>)
   802f0:	f000 f8a8 	bl	80444 <_init>
   802f4:	1b76      	subs	r6, r6, r5
   802f6:	10b6      	asrs	r6, r6, #2
   802f8:	bf18      	it	ne
   802fa:	2400      	movne	r4, #0
   802fc:	d006      	beq.n	8030c <__libc_init_array+0x3c>
   802fe:	3401      	adds	r4, #1
   80300:	f855 3b04 	ldr.w	r3, [r5], #4
   80304:	4798      	blx	r3
   80306:	42a6      	cmp	r6, r4
   80308:	d1f9      	bne.n	802fe <__libc_init_array+0x2e>
   8030a:	bd70      	pop	{r4, r5, r6, pc}
   8030c:	bd70      	pop	{r4, r5, r6, pc}
   8030e:	bf00      	nop
   80310:	00080450 	.word	0x00080450
   80314:	00080450 	.word	0x00080450
   80318:	00080458 	.word	0x00080458
   8031c:	00080450 	.word	0x00080450

00080320 <register_fini>:
   80320:	4b02      	ldr	r3, [pc, #8]	; (8032c <register_fini+0xc>)
   80322:	b113      	cbz	r3, 8032a <register_fini+0xa>
   80324:	4802      	ldr	r0, [pc, #8]	; (80330 <register_fini+0x10>)
   80326:	f000 b805 	b.w	80334 <atexit>
   8032a:	4770      	bx	lr
   8032c:	00000000 	.word	0x00000000
   80330:	00080341 	.word	0x00080341

00080334 <atexit>:
   80334:	2300      	movs	r3, #0
   80336:	4601      	mov	r1, r0
   80338:	461a      	mov	r2, r3
   8033a:	4618      	mov	r0, r3
   8033c:	f000 b81e 	b.w	8037c <__register_exitproc>

00080340 <__libc_fini_array>:
   80340:	b538      	push	{r3, r4, r5, lr}
   80342:	4c0a      	ldr	r4, [pc, #40]	; (8036c <__libc_fini_array+0x2c>)
   80344:	4d0a      	ldr	r5, [pc, #40]	; (80370 <__libc_fini_array+0x30>)
   80346:	1b64      	subs	r4, r4, r5
   80348:	10a4      	asrs	r4, r4, #2
   8034a:	d00a      	beq.n	80362 <__libc_fini_array+0x22>
   8034c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80350:	3b01      	subs	r3, #1
   80352:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80356:	3c01      	subs	r4, #1
   80358:	f855 3904 	ldr.w	r3, [r5], #-4
   8035c:	4798      	blx	r3
   8035e:	2c00      	cmp	r4, #0
   80360:	d1f9      	bne.n	80356 <__libc_fini_array+0x16>
   80362:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80366:	f000 b877 	b.w	80458 <_fini>
   8036a:	bf00      	nop
   8036c:	00080468 	.word	0x00080468
   80370:	00080464 	.word	0x00080464

00080374 <__retarget_lock_acquire_recursive>:
   80374:	4770      	bx	lr
   80376:	bf00      	nop

00080378 <__retarget_lock_release_recursive>:
   80378:	4770      	bx	lr
   8037a:	bf00      	nop

0008037c <__register_exitproc>:
   8037c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80380:	4d2c      	ldr	r5, [pc, #176]	; (80434 <__register_exitproc+0xb8>)
   80382:	4606      	mov	r6, r0
   80384:	6828      	ldr	r0, [r5, #0]
   80386:	4698      	mov	r8, r3
   80388:	460f      	mov	r7, r1
   8038a:	4691      	mov	r9, r2
   8038c:	f7ff fff2 	bl	80374 <__retarget_lock_acquire_recursive>
   80390:	4b29      	ldr	r3, [pc, #164]	; (80438 <__register_exitproc+0xbc>)
   80392:	681c      	ldr	r4, [r3, #0]
   80394:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80398:	2b00      	cmp	r3, #0
   8039a:	d03e      	beq.n	8041a <__register_exitproc+0x9e>
   8039c:	685a      	ldr	r2, [r3, #4]
   8039e:	2a1f      	cmp	r2, #31
   803a0:	dc1c      	bgt.n	803dc <__register_exitproc+0x60>
   803a2:	f102 0e01 	add.w	lr, r2, #1
   803a6:	b176      	cbz	r6, 803c6 <__register_exitproc+0x4a>
   803a8:	2101      	movs	r1, #1
   803aa:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   803ae:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   803b2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   803b6:	4091      	lsls	r1, r2
   803b8:	4308      	orrs	r0, r1
   803ba:	2e02      	cmp	r6, #2
   803bc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   803c0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   803c4:	d023      	beq.n	8040e <__register_exitproc+0x92>
   803c6:	3202      	adds	r2, #2
   803c8:	f8c3 e004 	str.w	lr, [r3, #4]
   803cc:	6828      	ldr	r0, [r5, #0]
   803ce:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   803d2:	f7ff ffd1 	bl	80378 <__retarget_lock_release_recursive>
   803d6:	2000      	movs	r0, #0
   803d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   803dc:	4b17      	ldr	r3, [pc, #92]	; (8043c <__register_exitproc+0xc0>)
   803de:	b30b      	cbz	r3, 80424 <__register_exitproc+0xa8>
   803e0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   803e4:	f3af 8000 	nop.w
   803e8:	4603      	mov	r3, r0
   803ea:	b1d8      	cbz	r0, 80424 <__register_exitproc+0xa8>
   803ec:	2000      	movs	r0, #0
   803ee:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   803f2:	f04f 0e01 	mov.w	lr, #1
   803f6:	6058      	str	r0, [r3, #4]
   803f8:	6019      	str	r1, [r3, #0]
   803fa:	4602      	mov	r2, r0
   803fc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80400:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80404:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80408:	2e00      	cmp	r6, #0
   8040a:	d0dc      	beq.n	803c6 <__register_exitproc+0x4a>
   8040c:	e7cc      	b.n	803a8 <__register_exitproc+0x2c>
   8040e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80412:	4301      	orrs	r1, r0
   80414:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80418:	e7d5      	b.n	803c6 <__register_exitproc+0x4a>
   8041a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8041e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80422:	e7bb      	b.n	8039c <__register_exitproc+0x20>
   80424:	6828      	ldr	r0, [r5, #0]
   80426:	f7ff ffa7 	bl	80378 <__retarget_lock_release_recursive>
   8042a:	f04f 30ff 	mov.w	r0, #4294967295
   8042e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80432:	bf00      	nop
   80434:	20000430 	.word	0x20000430
   80438:	00080440 	.word	0x00080440
   8043c:	00000000 	.word	0x00000000

00080440 <_global_impure_ptr>:
   80440:	20000008                                ... 

00080444 <_init>:
   80444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80446:	bf00      	nop
   80448:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8044a:	bc08      	pop	{r3}
   8044c:	469e      	mov	lr, r3
   8044e:	4770      	bx	lr

00080450 <__init_array_start>:
   80450:	00080321 	.word	0x00080321

00080454 <__frame_dummy_init_array_entry>:
   80454:	00080119                                ....

00080458 <_fini>:
   80458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8045a:	bf00      	nop
   8045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8045e:	bc08      	pop	{r3}
   80460:	469e      	mov	lr, r3
   80462:	4770      	bx	lr

00080464 <__fini_array_start>:
   80464:	000800f5 	.word	0x000800f5
